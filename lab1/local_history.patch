Index: solution_lab_1.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/solution_lab_1.ipynb b/solution_lab_1.ipynb
--- a/solution_lab_1.ipynb	
+++ b/solution_lab_1.ipynb	
@@ -1,15 +1,387 @@
 {
  "cells": [
   {
+   "cell_type": "markdown",
+   "source": [
+    "## TASK: IMDb scraping (deadline: 3 martie ora 23:59)\n",
+    "\n",
+    "First codeblock has all imports and global variables"
+   ],
+   "metadata": {
+    "collapsed": false
+   }
+  },
+  {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 79,
+   "outputs": [],
+   "source": [
+    "import bs4\n",
+    "import pandas as pd\n",
+    "import requests\n",
+    "import re\n",
+    "\n",
+    "base_url = 'https://www.imdb.com/'\n",
+    "url_top = base_url + 'chart/top/'\n",
+    "\n",
+    "def parse_html(html):\n",
+    "    return bs4.BeautifulSoup(html, 'html.parser')\n"
+   ],
+   "metadata": {
+    "collapsed": false,
+    "pycharm": {
+     "name": "#%%\n"
+    }
+   }
+  },
+  {
+   "cell_type": "markdown",
+   "source": [
+    "1. Pornind de la lista cu cele mai populare 250 de filme de pe IMDb ([https://www.imdb.com/chart/top/](https://www.imdb.com/chart/top/)), identificati pentru toate aceste filme link-ul catre pagina sa de recenzii.\n",
+    "\n",
+    "Exemplu: aici se gaseste pagina cu recenzii pentru \"The Shawshank Redemption\": [https://www.imdb.com/title/tt0111161/reviews](https://www.imdb.com/title/tt0111161/reviews)\n"
+   ],
    "metadata": {
-    "collapsed": true
-   },
+    "collapsed": false
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 80,
    "outputs": [],
    "source": [
-    ""
-   ]
+    "\n",
+    "def get_titles(url):\n",
+    "    html = requests.get(url).content\n",
+    "    soup = parse_html(html)\n",
+    "    top_entry_title = soup.select(\"table.chart.full-width tbody.lister-list tr td.titleColumn\")\n",
+    "    for entry in top_entry_title:\n",
+    "        url_title = entry.select_one(\"a\")[\"href\"]\n",
+    "        print(url_title)\n",
+    "\n",
+    "\n",
+    "def get_data(url):\n",
+    "    html = requests.get(url).content\n",
+    "    soup = parse_html(html)\n",
+    "    top_entry_title = soup.select(\"table.chart.full-width tbody.lister-list tr\")\n",
+    "    data = {\n",
+    "        \"rank\": [],\n",
+    "        \"title\": [],\n",
+    "        \"year\": [],\n",
+    "        \"rating\": [],\n",
+    "        \"ratings_number\": [],\n",
+    "        \"url_title\": [],\n",
+    "        \"url_image\": []\n",
+    "    }\n",
+    "\n",
+    "    for entry in top_entry_title:\n",
+    "        columns = [column for column in entry.select(\"td\")]\n",
+    "\n",
+    "        # getting urls\n",
+    "        try:\n",
+    "            url_image = columns[0].select_one(\"a\").select_one(\"img\")[\"src\"]\n",
+    "            url_title = columns[1].select_one(\"a\")[\"href\"]\n",
+    "        except Exception:\n",
+    "            continue\n",
+    "\n",
+    "        # getting rank, title and year\n",
+    "        details = list(columns[1].stripped_strings)\n",
+    "        rank = re.sub('\\.', '', details[0])\n",
+    "        title = details[1]\n",
+    "        year = re.sub('\\(|\\)', '', details[2])\n",
+    "\n",
+    "        # getting rating and number ratings\n",
+    "        rating_data = columns[2].select_one(\"strong\")['title']\n",
+    "        pattern = re.compile(\"[+-]?((\\d+[\\.\\,])+)?\\d+\")\n",
+    "        rating_numbers = []\n",
+    "        for matching in pattern.finditer(rating_data):\n",
+    "            rating_numbers.append(matching.group())\n",
+    "        rating_score = rating_numbers[0]\n",
+    "        ratings_number = rating_numbers[1]\n",
+    "\n",
+    "        # putting all data in dictionary\n",
+    "        data[\"rank\"].append(rank)\n",
+    "        data[\"title\"].append(title)\n",
+    "        data[\"year\"].append(year)\n",
+    "        data[\"rating\"].append(rating_score)\n",
+    "        data[\"ratings_number\"].append(ratings_number)\n",
+    "        data[\"url_title\"].append(url_title)\n",
+    "        data[\"url_image\"].append(url_image)\n",
+    "    return pd.DataFrame(data)\n",
+    "\n",
+    "# pd_data = get_data(url_top)\n",
+    "# pd_data.describe()\n",
+    "# pd_data.head()"
+   ],
+   "metadata": {
+    "collapsed": false,
+    "pycharm": {
+     "name": "#%%\n"
+    }
+   }
+  },
+  {
+   "cell_type": "markdown",
+   "source": [
+    "2. Pentru fiecare film colectati date despre recenziile sale (titlu, text, rating, data, utlizator, etc.)"
+   ],
+   "metadata": {
+    "collapsed": false
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 135,
+   "outputs": [
+    {
+     "ename": "ValueError",
+     "evalue": "If using all scalar values, you must pass an index",
+     "output_type": "error",
+     "traceback": [
+      "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
+      "\u001B[0;31mValueError\u001B[0m                                Traceback (most recent call last)",
+      "Input \u001B[0;32mIn [135]\u001B[0m, in \u001B[0;36m<module>\u001B[0;34m\u001B[0m\n\u001B[1;32m     68\u001B[0m             \u001B[38;5;28mprint\u001B[39m(more_review_data)\n\u001B[1;32m     74\u001B[0m temporal_title \u001B[38;5;241m=\u001B[39m \u001B[38;5;124m'\u001B[39m\u001B[38;5;124m/title/tt0111161/\u001B[39m\u001B[38;5;124m'\u001B[39m\n\u001B[0;32m---> 75\u001B[0m \u001B[43mget_reviews\u001B[49m\u001B[43m(\u001B[49m\u001B[43mtemporal_title\u001B[49m\u001B[43m)\u001B[49m\n",
+      "Input \u001B[0;32mIn [135]\u001B[0m, in \u001B[0;36mget_reviews\u001B[0;34m(title_url, load_more, total_loaded)\u001B[0m\n\u001B[1;32m     58\u001B[0m \u001B[38;5;66;03m# getting the review data\u001B[39;00m\n\u001B[1;32m     59\u001B[0m review_data \u001B[38;5;241m=\u001B[39m soup\u001B[38;5;241m.\u001B[39mselect_one(\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124msection.article div.lister\u001B[39m\u001B[38;5;124m\"\u001B[39m)\n\u001B[0;32m---> 60\u001B[0m data, next_key \u001B[38;5;241m=\u001B[39m \u001B[43mextract_review_data\u001B[49m\u001B[43m(\u001B[49m\u001B[43mreview_data\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m     62\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m load_more:\n\u001B[1;32m     63\u001B[0m     current_loaded \u001B[38;5;241m=\u001B[39m data\u001B[38;5;241m.\u001B[39mshape[\u001B[38;5;241m0\u001B[39m]\n",
+      "Input \u001B[0;32mIn [135]\u001B[0m, in \u001B[0;36mextract_review_data\u001B[0;34m(review_data)\u001B[0m\n\u001B[1;32m     45\u001B[0m     data[\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124muser\u001B[39m\u001B[38;5;124m\"\u001B[39m] \u001B[38;5;241m=\u001B[39m user\n\u001B[1;32m     46\u001B[0m     data[\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mdate\u001B[39m\u001B[38;5;124m\"\u001B[39m] \u001B[38;5;241m=\u001B[39m date\n\u001B[0;32m---> 47\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[43mpd\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mDataFrame\u001B[49m\u001B[43m(\u001B[49m\u001B[43mdata\u001B[49m\u001B[43m)\u001B[49m, data_key\n",
+      "File \u001B[0;32m/usr/lib/python3.10/site-packages/pandas/core/frame.py:636\u001B[0m, in \u001B[0;36mDataFrame.__init__\u001B[0;34m(self, data, index, columns, dtype, copy)\u001B[0m\n\u001B[1;32m    630\u001B[0m     mgr \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_init_mgr(\n\u001B[1;32m    631\u001B[0m         data, axes\u001B[38;5;241m=\u001B[39m{\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mindex\u001B[39m\u001B[38;5;124m\"\u001B[39m: index, \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mcolumns\u001B[39m\u001B[38;5;124m\"\u001B[39m: columns}, dtype\u001B[38;5;241m=\u001B[39mdtype, copy\u001B[38;5;241m=\u001B[39mcopy\n\u001B[1;32m    632\u001B[0m     )\n\u001B[1;32m    634\u001B[0m \u001B[38;5;28;01melif\u001B[39;00m \u001B[38;5;28misinstance\u001B[39m(data, \u001B[38;5;28mdict\u001B[39m):\n\u001B[1;32m    635\u001B[0m     \u001B[38;5;66;03m# GH#38939 de facto copy defaults to False only in non-dict cases\u001B[39;00m\n\u001B[0;32m--> 636\u001B[0m     mgr \u001B[38;5;241m=\u001B[39m \u001B[43mdict_to_mgr\u001B[49m\u001B[43m(\u001B[49m\u001B[43mdata\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mindex\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mcolumns\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mdtype\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mdtype\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mcopy\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mcopy\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mtyp\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mmanager\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    637\u001B[0m \u001B[38;5;28;01melif\u001B[39;00m \u001B[38;5;28misinstance\u001B[39m(data, ma\u001B[38;5;241m.\u001B[39mMaskedArray):\n\u001B[1;32m    638\u001B[0m     \u001B[38;5;28;01mimport\u001B[39;00m \u001B[38;5;21;01mnumpy\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mma\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mmrecords\u001B[39;00m \u001B[38;5;28;01mas\u001B[39;00m \u001B[38;5;21;01mmrecords\u001B[39;00m\n",
+      "File \u001B[0;32m/usr/lib/python3.10/site-packages/pandas/core/internals/construction.py:502\u001B[0m, in \u001B[0;36mdict_to_mgr\u001B[0;34m(data, index, columns, dtype, typ, copy)\u001B[0m\n\u001B[1;32m    494\u001B[0m     arrays \u001B[38;5;241m=\u001B[39m [\n\u001B[1;32m    495\u001B[0m         x\n\u001B[1;32m    496\u001B[0m         \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;129;01mnot\u001B[39;00m \u001B[38;5;28mhasattr\u001B[39m(x, \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mdtype\u001B[39m\u001B[38;5;124m\"\u001B[39m) \u001B[38;5;129;01mor\u001B[39;00m \u001B[38;5;129;01mnot\u001B[39;00m \u001B[38;5;28misinstance\u001B[39m(x\u001B[38;5;241m.\u001B[39mdtype, ExtensionDtype)\n\u001B[1;32m    497\u001B[0m         \u001B[38;5;28;01melse\u001B[39;00m x\u001B[38;5;241m.\u001B[39mcopy()\n\u001B[1;32m    498\u001B[0m         \u001B[38;5;28;01mfor\u001B[39;00m x \u001B[38;5;129;01min\u001B[39;00m arrays\n\u001B[1;32m    499\u001B[0m     ]\n\u001B[1;32m    500\u001B[0m     \u001B[38;5;66;03m# TODO: can we get rid of the dt64tz special case above?\u001B[39;00m\n\u001B[0;32m--> 502\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[43marrays_to_mgr\u001B[49m\u001B[43m(\u001B[49m\u001B[43marrays\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mcolumns\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mindex\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mdtype\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mdtype\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mtyp\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mtyp\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mconsolidate\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mcopy\u001B[49m\u001B[43m)\u001B[49m\n",
+      "File \u001B[0;32m/usr/lib/python3.10/site-packages/pandas/core/internals/construction.py:120\u001B[0m, in \u001B[0;36marrays_to_mgr\u001B[0;34m(arrays, columns, index, dtype, verify_integrity, typ, consolidate)\u001B[0m\n\u001B[1;32m    117\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m verify_integrity:\n\u001B[1;32m    118\u001B[0m     \u001B[38;5;66;03m# figure out the index, if necessary\u001B[39;00m\n\u001B[1;32m    119\u001B[0m     \u001B[38;5;28;01mif\u001B[39;00m index \u001B[38;5;129;01mis\u001B[39;00m \u001B[38;5;28;01mNone\u001B[39;00m:\n\u001B[0;32m--> 120\u001B[0m         index \u001B[38;5;241m=\u001B[39m \u001B[43m_extract_index\u001B[49m\u001B[43m(\u001B[49m\u001B[43marrays\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    121\u001B[0m     \u001B[38;5;28;01melse\u001B[39;00m:\n\u001B[1;32m    122\u001B[0m         index \u001B[38;5;241m=\u001B[39m ensure_index(index)\n",
+      "File \u001B[0;32m/usr/lib/python3.10/site-packages/pandas/core/internals/construction.py:664\u001B[0m, in \u001B[0;36m_extract_index\u001B[0;34m(data)\u001B[0m\n\u001B[1;32m    661\u001B[0m         \u001B[38;5;28;01mraise\u001B[39;00m \u001B[38;5;167;01mValueError\u001B[39;00m(\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mPer-column arrays must each be 1-dimensional\u001B[39m\u001B[38;5;124m\"\u001B[39m)\n\u001B[1;32m    663\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;129;01mnot\u001B[39;00m indexes \u001B[38;5;129;01mand\u001B[39;00m \u001B[38;5;129;01mnot\u001B[39;00m raw_lengths:\n\u001B[0;32m--> 664\u001B[0m     \u001B[38;5;28;01mraise\u001B[39;00m \u001B[38;5;167;01mValueError\u001B[39;00m(\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mIf using all scalar values, you must pass an index\u001B[39m\u001B[38;5;124m\"\u001B[39m)\n\u001B[1;32m    666\u001B[0m \u001B[38;5;28;01melif\u001B[39;00m have_series:\n\u001B[1;32m    667\u001B[0m     index \u001B[38;5;241m=\u001B[39m union_indexes(indexes)\n",
+      "\u001B[0;31mValueError\u001B[0m: If using all scalar values, you must pass an index"
+     ]
+    }
+   ],
+   "source": [
+    "def extract_text_from_element(element:bs4.BeautifulSoup):\n",
+    "    value = None\n",
+    "    if element is not None:\n",
+    "        value = element.text.strip()\n",
+    "    return value\n",
+    "\n",
+    "def extract_review_data(review_data: bs4.BeautifulSoup):\n",
+    "    \"\"\"\n",
+    "    This gets the whole div.lister data and extracts the next load_more key and all the current reviews\n",
+    "    :param review_data: -- soup type object that has the div.lister data\n",
+    "    :return:            -- returns review_data(pd.DataFrame) and data_key\n",
+    "    \"\"\"\n",
+    "    data_key = review_data.select_one(\"div.load-more-data\")['data-key']\n",
+    "    data_review = review_data.select(\"div.lister-list div.review-container div.lister-item-content\")\n",
+    "\n",
+    "    data = {\n",
+    "        \"title\": [],\n",
+    "        \"text\": [],\n",
+    "        \"rating\": [],\n",
+    "        \"user\": [],\n",
+    "        \"date\": []\n",
+    "    }\n",
+    "\n",
+    "    for review in data_review:\n",
+    "        # getting the rating\n",
+    "        rating_element = review.select_one(\"div.ipl-ratings-bar span.rating-other-user-rating span\", class_=False)\n",
+    "        rating = extract_text_from_element(rating_element)\n",
+    "\n",
+    "        # getting the title\n",
+    "        title_element = review.select_one(\"a.title\")\n",
+    "        title = extract_text_from_element(title_element)\n",
+    "\n",
+    "        # getting the username and date\n",
+    "        user_date_data = review.select(\"div.display-name-date > span\")\n",
+    "        user = extract_text_from_element(user_date_data[0])\n",
+    "        date = extract_text_from_element(user_date_data[1])\n",
+    "\n",
+    "        # getting the text\n",
+    "        text_element = review.select_one(\"div.content > div.text\")\n",
+    "        text = extract_text_from_element(text_element)\n",
+    "\n",
+    "        data[\"title\"] = title\n",
+    "        data[\"text\"] = text\n",
+    "        data[\"rating\"] = rating\n",
+    "        data[\"user\"] = user\n",
+    "        data[\"date\"] = date\n",
+    "    return pd.DataFrame(data), data_key\n",
+    "\n",
+    "def get_reviews(title_url, load_more=False, total_loaded=50):\n",
+    "    review_url = base_url + title_url + 'reviews/'\n",
+    "    html = requests.get(review_url).content\n",
+    "    soup = parse_html(html)\n",
+    "\n",
+    "    # getting the title of the movie\n",
+    "    title_data = soup.select_one(\"section.article div.subpage_title_block\")\n",
+    "    movie_title = title_data.select_one(\"div.subpage_title_block__right-column h3 a\").text\n",
+    "\n",
+    "    # getting the review data\n",
+    "    review_data = soup.select_one(\"section.article div.lister\")\n",
+    "    data, next_key = extract_review_data(review_data)\n",
+    "\n",
+    "    if load_more:\n",
+    "        current_loaded = data.shape[0]\n",
+    "        more_review_url = review_url + '_ajax?ref_=undefined&paginationKey=' + next_key\n",
+    "        while current_loaded < total_loaded:\n",
+    "            reviews_html = requests.get(more_review_url).content\n",
+    "            more_review_data = parse_html(reviews_html).select_one(\"div\")\n",
+    "            print(more_review_data)\n",
+    "\n",
+    "\n",
+    "temporal_title = '/title/tt0111161/'\n",
+    "get_reviews(temporal_title)\n"
+   ],
+   "metadata": {
+    "collapsed": false,
+    "pycharm": {
+     "name": "#%%\n"
+    }
+   }
+  },
+  {
+   "cell_type": "markdown",
+   "source": [
+    "3. Creati un dataset de recenzii, pentru fiecare recenzie stocati:\n",
+    " * filmul caruia ii apartine\n",
+    " * titlul recenziei\n",
+    " * textul recenziei\n",
+    " * ratingul\n",
+    " * data\n",
+    " * utilizator\n",
+    "\n",
+    " Salvati datasetul intr-un fisier JSON.\n"
+   ],
+   "metadata": {
+    "collapsed": false,
+    "pycharm": {
+     "name": "#%% md\n"
+    }
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 81,
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "['/title/tt0111161/' '/title/tt0068646/' '/title/tt0071562/'\n",
+      " '/title/tt0468569/' '/title/tt0050083/' '/title/tt0108052/'\n",
+      " '/title/tt0167260/' '/title/tt0110912/' '/title/tt0060196/'\n",
+      " '/title/tt0120737/' '/title/tt0137523/' '/title/tt0109830/'\n",
+      " '/title/tt1375666/' '/title/tt0167261/' '/title/tt0080684/'\n",
+      " '/title/tt0133093/' '/title/tt0099685/' '/title/tt0073486/'\n",
+      " '/title/tt0047478/' '/title/tt0114369/' '/title/tt0102926/'\n",
+      " '/title/tt0317248/' '/title/tt0118799/' '/title/tt0038650/'\n",
+      " '/title/tt0120815/' '/title/tt0076759/' '/title/tt0816692/'\n",
+      " '/title/tt0245429/' '/title/tt0120689/' '/title/tt10872600/'\n",
+      " '/title/tt6751668/' '/title/tt0110413/' '/title/tt0056058/'\n",
+      " '/title/tt0253474/' '/title/tt0103064/' '/title/tt0088763/'\n",
+      " '/title/tt0114814/' '/title/tt0110357/' '/title/tt0054215/'\n",
+      " '/title/tt0027977/' '/title/tt0095327/' '/title/tt0120586/'\n",
+      " '/title/tt2582802/' '/title/tt0172495/' '/title/tt0407887/'\n",
+      " '/title/tt0021749/' '/title/tt1675434/' '/title/tt0482571/'\n",
+      " '/title/tt0034583/' '/title/tt0064116/' '/title/tt0047396/'\n",
+      " '/title/tt0095765/' '/title/tt0078748/' '/title/tt0078788/'\n",
+      " '/title/tt0209144/' '/title/tt0082971/' '/title/tt0032553/'\n",
+      " '/title/tt1853728/' '/title/tt0405094/' '/title/tt0050825/'\n",
+      " '/title/tt0043014/' '/title/tt0910970/' '/title/tt4154756/'\n",
+      " '/title/tt0051201/' '/title/tt4633694/' '/title/tt0081505/'\n",
+      " '/title/tt0057012/' '/title/tt0119698/' '/title/tt0364569/'\n",
+      " '/title/tt7286456/' '/title/tt5311514/' '/title/tt2380307/'\n",
+      " '/title/tt1345836/' '/title/tt0090605/' '/title/tt0087843/'\n",
+      " '/title/tt4154796/' '/title/tt8267604/' '/title/tt0082096/'\n",
+      " '/title/tt0057565/' '/title/tt1187043/' '/title/tt0114709/'\n",
+      " '/title/tt0086879/' '/title/tt0169547/' '/title/tt0112573/'\n",
+      " '/title/tt0361748/' '/title/tt0119217/' '/title/tt8503618/'\n",
+      " '/title/tt0091251/' '/title/tt0086190/' '/title/tt0062622/'\n",
+      " '/title/tt0105236/' '/title/tt0986264/' '/title/tt0052357/'\n",
+      " '/title/tt0022100/' '/title/tt2106476/' '/title/tt0033467/'\n",
+      " '/title/tt0045152/' '/title/tt0180093/' '/title/tt0053125/'\n",
+      " '/title/tt0044741/' '/title/tt0338013/' '/title/tt0040522/'\n",
+      " '/title/tt0056172/' '/title/tt0012349/' '/title/tt0093058/'\n",
+      " '/title/tt1255953/' '/title/tt5074352/' '/title/tt0053604/'\n",
+      " '/title/tt0036775/' '/title/tt0017136/' '/title/tt0066921/'\n",
+      " '/title/tt0075314/' '/title/tt10272386/' '/title/tt0070735/'\n",
+      " '/title/tt1832382/' '/title/tt0086250/' '/title/tt0208092/'\n",
+      " '/title/tt8579674/' '/title/tt0211915/' '/title/tt0056592/'\n",
+      " '/title/tt0435761/' '/title/tt0059578/' '/title/tt1049413/'\n",
+      " '/title/tt0048473/' '/title/tt0097576/' '/title/tt0113277/'\n",
+      " '/title/tt0119488/' '/title/tt0089881/' '/title/tt0095016/'\n",
+      " '/title/tt0055630/' '/title/tt6966692/' '/title/tt0042876/'\n",
+      " '/title/tt0363163/' '/title/tt0042192/' '/title/tt0071853/'\n",
+      " '/title/tt0053291/' '/title/tt0372784/' '/title/tt15097216/'\n",
+      " '/title/tt0105695/' '/title/tt0118849/' '/title/tt0347149/'\n",
+      " '/title/tt0993846/' '/title/tt0055031/' '/title/tt0469494/'\n",
+      " '/title/tt0112641/' '/title/tt0057115/' '/title/tt0040897/'\n",
+      " '/title/tt0457430/' '/title/tt0268978/' '/title/tt1305806/'\n",
+      " '/title/tt0081398/' '/title/tt0071315/' '/title/tt0096283/'\n",
+      " '/title/tt1130884/' '/title/tt0120735/' '/title/tt0477348/'\n",
+      " '/title/tt4729430/' '/title/tt0046912/' '/title/tt0084787/'\n",
+      " '/title/tt0015864/' '/title/tt5027774/' '/title/tt0050976/'\n",
+      " '/title/tt0080678/' '/title/tt0167404/' '/title/tt0071411/'\n",
+      " '/title/tt0107290/' '/title/tt0120382/' '/title/tt0050986/'\n",
+      " '/title/tt0041959/' '/title/tt0353969/' '/title/tt0434409/'\n",
+      " '/title/tt0083658/' '/title/tt0117951/' '/title/tt0116282/'\n",
+      " '/title/tt0050212/' '/title/tt2096673/' '/title/tt0266543/'\n",
+      " '/title/tt0266697/' '/title/tt1291584/' '/title/tt0031381/'\n",
+      " '/title/tt0046438/' '/title/tt0047296/' '/title/tt0476735/'\n",
+      " '/title/tt1392214/' '/title/tt3011894/' '/title/tt2278388/'\n",
+      " '/title/tt0079944/' '/title/tt0077416/' '/title/tt0017925/'\n",
+      " '/title/tt1205489/' '/title/tt0060827/' '/title/tt0015324/'\n",
+      " '/title/tt0112471/' '/title/tt0264464/' '/title/tt0978762/'\n",
+      " '/title/tt0031679/' '/title/tt0072684/' '/title/tt0107207/'\n",
+      " '/title/tt2119532/' '/title/tt2267998/' '/title/tt3170832/'\n",
+      " '/title/tt0065234/' '/title/tt8108198/' '/title/tt0019254/'\n",
+      " '/title/tt1160419/' '/title/tt1950186/' '/title/tt2024544/'\n",
+      " '/title/tt0035446/' '/title/tt0118715/' '/title/tt0097165/'\n",
+      " '/title/tt1201607/' '/title/tt0052618/' '/title/tt0892769/'\n",
+      " '/title/tt1392190/' '/title/tt0077711/' '/title/tt0405159/'\n",
+      " '/title/tt0046268/' '/title/tt0092005/' '/title/tt0074958/'\n",
+      " '/title/tt4016934/' '/title/tt3315342/' '/title/tt1954470/'\n",
+      " '/title/tt0113247/' '/title/tt5323662/' '/title/tt0061512/'\n",
+      " '/title/tt1028532/' '/title/tt0053198/' '/title/tt0091763/'\n",
+      " '/title/tt1895587/' '/title/tt0198781/' '/title/tt0032976/'\n",
+      " '/title/tt0079470/' '/title/tt0116231/' '/title/tt0118694/'\n",
+      " '/title/tt0395169/' '/title/tt1979320/' '/title/tt0075148/'\n",
+      " '/title/tt11032374/' '/title/tt0245712/' '/title/tt0758758/'\n",
+      " '/title/tt0087544/' '/title/tt3417422/' '/title/tt0381681/'\n",
+      " '/title/tt0025316/' '/title/tt10431500/' '/title/tt0050783/'\n",
+      " '/title/tt0058946/' '/title/tt0060107/' '/title/tt0242519/'\n",
+      " '/title/tt0083922/']\n"
+     ]
+    }
+   ],
+   "source": [
+    "top_data = get_data(url_top)\n",
+    "titles_url = top_data['url_title'].to_numpy()\n",
+    "print(titles_url)\n"
+   ],
+   "metadata": {
+    "collapsed": false,
+    "pycharm": {
+     "name": "#%%\n"
+    }
+   }
+  },
+  {
+   "cell_type": "markdown",
+   "source": [
+    "4. Pe o pagina cu recenzii putem gasi un numar mic de astfel de date. Butonul de \"Load more\" de la final, cand este apasat, produce un request care returneaza HTML-ul urmatoarelor recenzii. Folosind aceasta logica colectati automat pentru fiecare film un numar mai mare de recenzii."
+   ],
+   "metadata": {
+    "collapsed": false,
+    "pycharm": {
+     "name": "#%% md\n"
+    }
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "outputs": [],
+   "source": [],
+   "metadata": {
+    "collapsed": false,
+    "pycharm": {
+     "name": "#%%\n"
+    }
+   }
   }
  ],
  "metadata": {
